// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  farms         Farm[]

  @@map("users")
}

model Farm {
  id          String    @id @default(cuid())
  name        String
  location    String?
  description String?
  plantType   String    @default("Unknown") @map("plant_type") // Required field for plant type
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mainRod     MainRod?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("farms")
}

model Config {
  id        String @id @default(cuid())
  key       String @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("config")
}

model MainRod {
  id            String         @id @default(cuid())
  rodId         String         @unique @map("rod_id") // Production ID
  farmId        String?        @unique @map("farm_id") // Optional - only set when bound to farm
  farm          Farm?          @relation(fields: [farmId], references: [id], onDelete: SetNull)
  isConnected   Boolean        @default(false) @map("is_connected")
  lastSeen      DateTime?      @map("last_seen")
  secondaryRods SecondaryRod[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("main_rods")
}

model SecondaryRod {
  id            String         @id @default(cuid())
  rodId         String         @unique @map("rod_id") // Production ID
  name          String?
  location      String?
  mainRodId     String         @map("main_rod_id")
  mainRod       MainRod        @relation(fields: [mainRodId], references: [id], onDelete: Cascade)
  isActive      Boolean        @default(true) @map("is_active")
  lastSeen      DateTime?      @map("last_seen")
  battery       Float?         // Battery percentage (0-100)
  positionX     Float?         @map("position_x") // X coordinate for map view
  positionY     Float?         @map("position_y") // Y coordinate for map view
  readings      Reading[]
  aiSuggestions AISuggestion[] // One-to-many relation
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("secondary_rods")
}

model Reading {
  id             String        @id @default(cuid())
  secondaryRodId String        @map("secondary_rod_id")
  secondaryRod   SecondaryRod  @relation(fields: [secondaryRodId], references: [id], onDelete: Cascade)
  temperature    Float?
  moisture       Float?
  ph             Float?
  conductivity   Float?
  nitrogen       Float?        @map("n")
  phosphorus     Float?        @map("p")
  potassium      Float?        @map("k")
  battery        Float?        // Battery percentage (0-100)
  timestamp      DateTime      @default(now())
  aiSuggestion   AISuggestion? // One-to-one relation

  @@map("readings")
}

model AISuggestion {
  id             String       @id @default(cuid())
  readingId      String       @unique @map("reading_id")
  reading        Reading      @relation(fields: [readingId], references: [id], onDelete: Cascade)
  secondaryRodId String       @map("secondary_rod_id")
  secondaryRod   SecondaryRod @relation(fields: [secondaryRodId], references: [id], onDelete: Cascade)
  plantType      String       @map("plant_type")
  model          String       // 'deepseek' | 'rule_based'
  suggestion     Json         // Full AISuggestion payload
  generatedAt    DateTime     @default(now()) @map("generated_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@index([secondaryRodId])
  @@index([createdAt])
  @@map("ai_suggestions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
